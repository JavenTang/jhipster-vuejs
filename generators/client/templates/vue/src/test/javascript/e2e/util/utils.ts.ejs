import {
browser,
by,
element,
ElementArrayFinder,
ElementFinder,
ExpectedConditions as EC,
protractor
} from 'protractor';

const waitTimeoutInMillis = browser.params.waitTimeoutInMillis || 30000;
const logWaitErrors = browser.params.logWaitErrors || false;

export const checkSelectorExist = (selector: ElementFinder) => selector !== undefined;

/**
 * @returns Function which resolves to boolean
 */
export const isDisplayed = (selector: ElementFinder) => {
  if (!checkSelectorExist(selector)) return;
  return EC.visibilityOf(selector);
};

export const isHidden = (selector: ElementFinder) => {
  if (!checkSelectorExist(selector)) return;
  return EC.invisibilityOf(selector);
};

/**
 * Returns a promise for an element to be visible. If an element is not visible
 * within threshold time, promise will be rejected.
 */
export const waitUntilDisplayed = async (selector: ElementFinder, classname = '', timeout = waitTimeoutInMillis) => {
  await browser.wait(
    EC.visibilityOf(selector),
    timeout,
    classname === '' ? `"${selector.locator()}" is not visible.`
      : `"${selector.locator()}" of Page Object class '${classname}' is not visible.`
  );
};

/**
 * Returns a promise for an element to be visible. If an element is not visible
 * within threshold time, it will catch promise rejection and continue test
 * execution
 */
export const waitUntilDisplayedAndContinue = async (selector: ElementFinder, classname = '', timeout = waitTimeoutInMillis) => {

  await browser.wait(
    EC.visibilityOf(selector),
    timeout,
    classname === '' ? `"${selector.locator()}" is not visible.`
      : `"${selector.locator()}" of Page Object class '${classname}' is not visible.`
  ).catch(e => logWaitErrors ? console.error(e.message) : undefined);
};

/**
 * Returns a promise for an element to be clickable. If an element is not clickable
 * within threshold time, promise will be rejected.
 */
export const waitUntilClickable = async (selector: ElementFinder, classname = '', timeout = waitTimeoutInMillis) => {

  await browser.wait(
    EC.elementToBeClickable(selector),
    timeout,
    classname === '' ? `"${selector.locator()}" is not clickable.`
      : `"${selector.locator()}" of Page Object class '${classname}' is not clickable.`
  );
};

/**
 * Waits for an element to be clickable and trigger click event.
 *
 * @param selector
 */
export const click = async (selector: ElementFinder) => {

  await waitUntilClickable(selector);
  await selector.click();
};

/**
 * Returns a promise for an element to be hidden. If an element is visible
 * after threshold time, promise will be rejected.
 */
export const waitUntilHidden = async (selector: ElementFinder, classname = '', timeout = waitTimeoutInMillis) => {

  await browser.wait(
    EC.invisibilityOf(selector),
    timeout,
    classname === '' ? `"${selector.locator()}" is not hidden.`
      : `"${selector.locator()}" of Page Object class '${classname}' is not hidden.`
  );
};

export const waitForCount = async (elementArrayFinder: ElementArrayFinder, expectedCount: number) => () => {
  return elementArrayFinder.count().then(actualCount => expectedCount === actualCount);
};

export const waitUntilCount = async (
  elementArrayFinder: ElementArrayFinder,
  expectedCount: number,
  timeout = waitTimeoutInMillis
) => {
  await browser.wait(
    await waitForCount(elementArrayFinder, expectedCount),
    timeout,
    `Failed while waiting for "${elementArrayFinder.locator()}" to have ${expectedCount} elements.`
  );
};


export const getSuccessToast = (): ElementFinder =>
  element(by.css('div[role=alert].alert.alert-success'));

export const getInfoToast = (): ElementFinder =>
  element(by.css('div[role=alert].alert.alert-info'));

export const getDangerToast = (): ElementFinder =>
  element(by.css('div[role=alert].alert.alert-danger'));

export const clearElement = (elem, length) => {
  length = length || 100;
  var backspaceSeries = '';
  for (var i = 0; i < length; i++) {
    backspaceSeries += protractor.Key.BACK_SPACE;
  }
  elem.sendKeys(backspaceSeries);
}
